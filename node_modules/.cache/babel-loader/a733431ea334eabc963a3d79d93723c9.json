{"ast":null,"code":"\"use strict\";\n/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_dom_1 = __importDefault(require(\"react-dom\"));\n\nvar isEqual_1 = __importDefault(require(\"lodash/isEqual\"));\n\nvar quill_1 = __importDefault(require(\"quill\"));\n\nvar ReactQuill =\n/** @class */\nfunction (_super) {\n  __extends(ReactQuill, _super);\n\n  function ReactQuill(props) {\n    var _this = _super.call(this, props) || this;\n    /*\n    Changing one of these props should cause a full re-render and a\n    re-instantiation of the Quill editor.\n    */\n\n\n    _this.dirtyProps = ['modules', 'formats', 'bounds', 'theme', 'children'];\n    /*\n    Changing one of these props should cause a regular update. These are mostly\n    props that act on the container, rather than the quillized editing area.\n    */\n\n    _this.cleanProps = ['id', 'className', 'style', 'placeholder', 'tabIndex', 'onChange', 'onChangeSelection', 'onFocus', 'onBlur', 'onKeyPress', 'onKeyDown', 'onKeyUp'];\n    _this.state = {\n      generation: 0\n    };\n    /*\n    Tracks the internal selection of the Quill editor\n    */\n\n    _this.selection = null;\n\n    _this.onEditorChange = function (eventName, rangeOrDelta, oldRangeOrDelta, source) {\n      var _a, _b, _c, _d;\n\n      if (eventName === 'text-change') {\n        (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);\n      } else if (eventName === 'selection-change') {\n        (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);\n      }\n    };\n\n    var value = _this.isControlled() ? props.value : props.defaultValue;\n    _this.value = value !== null && value !== void 0 ? value : '';\n    return _this;\n  }\n\n  ReactQuill.prototype.validateProps = function (props) {\n    var _a;\n\n    if (react_1.default.Children.count(props.children) > 1) throw new Error('The Quill editing area can only be composed of a single React element.');\n\n    if (react_1.default.Children.count(props.children)) {\n      var child = react_1.default.Children.only(props.children);\n      if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === 'textarea') throw new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');\n    }\n\n    if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet) throw new Error('You are passing the `delta` object from the `onChange` event back ' + 'as `value`. You most probably want `editor.getContents()` instead. ' + 'See: https://github.com/zenoamaro/react-quill#using-deltas');\n  };\n\n  ReactQuill.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var _this = this;\n\n    var _a;\n\n    this.validateProps(nextProps); // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    } // Handle value changes in-place\n\n\n    if ('value' in nextProps) {\n      var prevContents = this.getEditorContents();\n      var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : ''); // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    } // Handle read-only changes in-place\n\n\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly);\n    } // Clean and Dirty props require a render\n\n\n    return __spreadArrays(this.cleanProps, this.dirtyProps).some(function (prop) {\n      return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n    });\n  };\n\n  ReactQuill.prototype.shouldComponentRegenerate = function (nextProps) {\n    var _this = this; // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n\n\n    return this.dirtyProps.some(function (prop) {\n      return !isEqual_1.default(nextProps[prop], _this.props[prop]);\n    });\n  };\n\n  ReactQuill.prototype.componentDidMount = function () {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor, this.getEditorContents());\n  };\n\n  ReactQuill.prototype.componentWillUnmount = function () {\n    this.destroyEditor();\n  };\n\n  ReactQuill.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var _this = this; // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n\n\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      var delta = this.editor.getContents();\n      var selection = this.editor.getSelection();\n      this.regenerationSnapshot = {\n        delta: delta,\n        selection: selection\n      };\n      this.setState({\n        generation: this.state.generation + 1\n      });\n      this.destroyEditor();\n    } // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n\n\n    if (this.state.generation !== prevState.generation) {\n      var _a = this.regenerationSnapshot,\n          delta = _a.delta,\n          selection_1 = _a.selection;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      var editor_1 = this.editor;\n      editor_1.setContents(delta);\n      postpone(function () {\n        return _this.setEditorSelection(editor_1, selection_1);\n      });\n    }\n  };\n\n  ReactQuill.prototype.instantiateEditor = function () {\n    if (this.editor) return;\n    this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());\n  };\n\n  ReactQuill.prototype.destroyEditor = function () {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n    delete this.editor;\n  };\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n\n\n  ReactQuill.prototype.isControlled = function () {\n    return 'value' in this.props;\n  };\n\n  ReactQuill.prototype.getEditorConfig = function () {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      scrollingContainer: this.props.scrollingContainer,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme\n    };\n  };\n\n  ReactQuill.prototype.getEditor = function () {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  };\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n\n\n  ReactQuill.prototype.createEditor = function (element, config) {\n    var editor = new quill_1.default(element, config);\n\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n\n    this.hookEditor(editor);\n    return editor;\n  };\n\n  ReactQuill.prototype.hookEditor = function (editor) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor); // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n\n    editor.on('editor-change', this.onEditorChange);\n  };\n\n  ReactQuill.prototype.unhookEditor = function (editor) {\n    editor.off('editor-change', this.onEditorChange);\n  };\n\n  ReactQuill.prototype.getEditorContents = function () {\n    return this.value;\n  };\n\n  ReactQuill.prototype.getEditorSelection = function () {\n    return this.selection;\n  };\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n\n\n  ReactQuill.prototype.isDelta = function (value) {\n    return value && value.ops;\n  };\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n\n\n  ReactQuill.prototype.isEqualValue = function (value, nextValue) {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual_1.default(value.ops, nextValue.ops);\n    } else {\n      return isEqual_1.default(value, nextValue);\n    }\n  };\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n\n\n  ReactQuill.prototype.setEditorContents = function (editor, value) {\n    var _this = this;\n\n    this.value = value;\n    var sel = this.getEditorSelection();\n\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert(value));\n    } else {\n      editor.setContents(value);\n    }\n\n    postpone(function () {\n      return _this.setEditorSelection(editor, sel);\n    });\n  };\n\n  ReactQuill.prototype.setEditorSelection = function (editor, range) {\n    this.selection = range;\n\n    if (range) {\n      // Validate bounds before applying.\n      var length_1 = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length_1 - 1));\n      range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));\n      editor.setSelection(range);\n    }\n  };\n\n  ReactQuill.prototype.setEditorTabIndex = function (editor, tabIndex) {\n    var _a, _b;\n\n    if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {\n      editor.scroll.domNode.tabIndex = tabIndex;\n    }\n  };\n\n  ReactQuill.prototype.setEditorReadOnly = function (editor, value) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  };\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n\n\n  ReactQuill.prototype.makeUnprivilegedEditor = function (editor) {\n    var e = editor;\n    return {\n      getHTML: function getHTML() {\n        return e.root.innerHTML;\n      },\n      getLength: e.getLength.bind(e),\n      getText: e.getText.bind(e),\n      getContents: e.getContents.bind(e),\n      getSelection: e.getSelection.bind(e),\n      getBounds: e.getBounds.bind(e)\n    };\n  };\n\n  ReactQuill.prototype.getEditingArea = function () {\n    if (!this.editingArea) {\n      throw new Error('Instantiating on missing editing area');\n    }\n\n    var element = react_dom_1.default.findDOMNode(this.editingArea);\n\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n\n    return element;\n  };\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n\n\n  ReactQuill.prototype.renderEditingArea = function () {\n    var _this = this;\n\n    var _a = this.props,\n        children = _a.children,\n        preserveWhitespace = _a.preserveWhitespace;\n    var generation = this.state.generation;\n    var properties = {\n      key: generation,\n      ref: function ref(instance) {\n        _this.editingArea = instance;\n      }\n    };\n\n    if (react_1.default.Children.count(children)) {\n      return react_1.default.cloneElement(react_1.default.Children.only(children), properties);\n    }\n\n    return preserveWhitespace ? react_1.default.createElement(\"pre\", __assign({}, properties)) : react_1.default.createElement(\"div\", __assign({}, properties));\n  };\n\n  ReactQuill.prototype.render = function () {\n    var _a;\n\n    return react_1.default.createElement(\"div\", {\n      id: this.props.id,\n      style: this.props.style,\n      key: this.state.generation,\n      className: \"quill \" + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : ''),\n      onKeyPress: this.props.onKeyPress,\n      onKeyDown: this.props.onKeyDown,\n      onKeyUp: this.props.onKeyUp\n    }, this.renderEditingArea());\n  };\n\n  ReactQuill.prototype.onEditorChangeText = function (value, delta, source, editor) {\n    var _a, _b;\n\n    if (!this.editor) return; // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n\n    var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n      this.value = nextContents;\n      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);\n    }\n  };\n\n  ReactQuill.prototype.onEditorChangeSelection = function (nextSelection, source, editor) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (!this.editor) return;\n    var currentSelection = this.getEditorSelection();\n    var hasGainedFocus = !currentSelection && nextSelection;\n    var hasLostFocus = currentSelection && !nextSelection;\n    if (isEqual_1.default(nextSelection, currentSelection)) return;\n    this.selection = nextSelection;\n    (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);\n    }\n  };\n\n  ReactQuill.prototype.focus = function () {\n    if (!this.editor) return;\n    this.editor.focus();\n  };\n\n  ReactQuill.prototype.blur = function () {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  };\n\n  ReactQuill.displayName = 'React Quill';\n  /*\n  Export Quill to be able to call `register`\n  */\n\n  ReactQuill.Quill = quill_1.default;\n  ReactQuill.defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false\n  };\n  return ReactQuill;\n}(react_1.default.Component);\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\n\n\nfunction postpone(fn) {\n  Promise.resolve().then(fn);\n}\n\nmodule.exports = ReactQuill;","map":{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["/*\nReact-Quill\nhttps://github.com/zenoamaro/react-quill\n*/\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport isEqual from 'lodash/isEqual';\n\nimport Quill, {\n  QuillOptionsStatic,\n  DeltaStatic,\n  RangeStatic,\n  BoundsStatic,\n  StringMap,\n  Sources,\n} from 'quill';\n\n// Merged namespace hack to export types along with default object\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nnamespace ReactQuill {\n  export type Value = string | DeltaStatic;\n  export type Range = RangeStatic | null;\n\n  export interface QuillOptions extends QuillOptionsStatic {\n    tabIndex?: number,\n  }\n\n  export interface ReactQuillProps {\n    bounds?: string | HTMLElement,\n    children?: React.ReactElement<any>,\n    className?: string,\n    defaultValue?: Value,\n    formats?: string[],\n    id?: string,\n    modules?: StringMap,\n    onChange?(\n      value: string,\n      delta: DeltaStatic,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onChangeSelection?(\n      selection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onFocus?(\n      selection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onBlur?(\n      previousSelection: Range,\n      source: Sources,\n      editor: UnprivilegedEditor,\n    ): void,\n    onKeyDown?: React.EventHandler<any>,\n    onKeyPress?: React.EventHandler<any>,\n    onKeyUp?: React.EventHandler<any>,\n    placeholder?: string,\n    preserveWhitespace?: boolean,\n    readOnly?: boolean,\n    scrollingContainer?: string | HTMLElement,\n    style?: React.CSSProperties,\n    tabIndex?: number,\n    theme?: string,\n    value?: Value,\n  }\n\n  export interface UnprivilegedEditor {\n    getLength(): number;\n    getText(index?: number, length?: number): string;\n    getHTML(): string;\n    getBounds(index: number, length?: number): BoundsStatic;\n    getSelection(focus?: boolean): RangeStatic;\n    getContents(index?: number, length?: number): DeltaStatic;\n  }\n}\n\n// Re-import everything from namespace into scope for comfort\nimport Value = ReactQuill.Value;\nimport Range = ReactQuill.Range;\nimport QuillOptions = ReactQuill.QuillOptions;\nimport ReactQuillProps = ReactQuill.ReactQuillProps;\nimport UnprivilegedEditor = ReactQuill.UnprivilegedEditor;\n\ninterface ReactQuillState {\n  generation: number,\n}\n\nclass ReactQuill extends React.Component<ReactQuillProps, ReactQuillState> {\n\n  static displayName = 'React Quill'\n\n  /*\n  Export Quill to be able to call `register`\n  */\n  static Quill = Quill;\n\n  /*\n  Changing one of these props should cause a full re-render and a\n  re-instantiation of the Quill editor.\n  */\n  dirtyProps: (keyof ReactQuillProps)[] = [\n    'modules',\n    'formats',\n    'bounds',\n    'theme',\n    'children',\n  ]\n\n  /*\n  Changing one of these props should cause a regular update. These are mostly\n  props that act on the container, rather than the quillized editing area.\n  */\n  cleanProps: (keyof ReactQuillProps)[] = [\n    'id',\n    'className',\n    'style',\n    'placeholder',\n    'tabIndex',\n    'onChange',\n    'onChangeSelection',\n    'onFocus',\n    'onBlur',\n    'onKeyPress',\n    'onKeyDown',\n    'onKeyUp',\n  ]\n\n  static defaultProps = {\n    theme: 'snow',\n    modules: {},\n    readOnly: false,\n  }\n\n  state: ReactQuillState = {\n    generation: 0,\n  }\n\n  /*\n  The Quill Editor instance.\n  */\n  editor?: Quill\n\n  /*\n  Reference to the element holding the Quill editing area.\n  */\n  editingArea?: React.ReactInstance | null\n\n  /*\n  Tracks the internal value of the Quill editor\n  */\n  value: Value\n\n  /*\n  Tracks the internal selection of the Quill editor\n  */\n  selection: Range = null\n\n  /*\n  Used to compare whether deltas from `onChange` are being used as `value`.\n  */\n  lastDeltaChangeSet?: DeltaStatic\n\n  /*\n  Stores the contents of the editor to be restored after regeneration.\n  */\n  regenerationSnapshot?: {\n    delta: DeltaStatic,\n    selection: Range,\n  }\n\n  /*\n  A weaker, unprivileged proxy for the editor that does not allow accidentally\n  modifying editor state.\n  */\n  unprivilegedEditor?: UnprivilegedEditor\n\n  constructor(props: ReactQuillProps) {\n    super(props);\n    const value = this.isControlled()? props.value : props.defaultValue;\n    this.value = value ?? '';\n  }\n\n  validateProps(props: ReactQuillProps): void {\n    if (React.Children.count(props.children) > 1) throw new Error(\n      'The Quill editing area can only be composed of a single React element.'\n    );\n\n    if (React.Children.count(props.children)) {\n      const child = React.Children.only(props.children);\n      if (child?.type === 'textarea') throw new Error(\n        'Quill does not support editing on a <textarea>. Use a <div> instead.'\n      );\n    }\n\n    if (\n      this.lastDeltaChangeSet &&\n      props.value === this.lastDeltaChangeSet\n    ) throw new Error(\n      'You are passing the `delta` object from the `onChange` event back ' +\n      'as `value`. You most probably want `editor.getContents()` instead. ' +\n      'See: https://github.com/zenoamaro/react-quill#using-deltas'\n    );\n  }\n\n  shouldComponentUpdate(nextProps: ReactQuillProps, nextState: ReactQuillState) {\n    this.validateProps(nextProps);\n\n    // If the editor hasn't been instantiated yet, or the component has been\n    // regenerated, we already know we should update.\n    if (!this.editor || this.state.generation !== nextState.generation) {\n      return true;\n    }\n\n    // Handle value changes in-place\n    if ('value' in nextProps) {\n      const prevContents = this.getEditorContents();\n      const nextContents = nextProps.value ?? '';\n\n      // NOTE: Seeing that Quill is missing a way to prevent edits, we have to\n      //       settle for a hybrid between controlled and uncontrolled mode. We\n      //       can't prevent the change, but we'll still override content\n      //       whenever `value` differs from current state.\n      // NOTE: Comparing an HTML string and a Quill Delta will always trigger a\n      //       change, regardless of whether they represent the same document.\n      if (!this.isEqualValue(nextContents, prevContents)) {\n        this.setEditorContents(this.editor, nextContents);\n      }\n    }\n\n    // Handle read-only changes in-place\n    if (nextProps.readOnly !== this.props.readOnly) {\n      this.setEditorReadOnly(this.editor, nextProps.readOnly!);\n    }\n\n    // Clean and Dirty props require a render\n    return [...this.cleanProps, ...this.dirtyProps].some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  shouldComponentRegenerate(nextProps: ReactQuillProps): boolean {\n    // Whenever a `dirtyProp` changes, the editor needs reinstantiation.\n    return this.dirtyProps.some((prop) => {\n      return !isEqual(nextProps[prop], this.props[prop]);\n    });\n  }\n\n  componentDidMount() {\n    this.instantiateEditor();\n    this.setEditorContents(this.editor!, this.getEditorContents());\n  }\n\n  componentWillUnmount() {\n    this.destroyEditor();\n  }\n\n  componentDidUpdate(prevProps: ReactQuillProps, prevState: ReactQuillState) {\n    // If we're changing one of the `dirtyProps`, the entire Quill Editor needs\n    // to be re-instantiated. Regenerating the editor will cause the whole tree,\n    // including the container, to be cleaned up and re-rendered from scratch.\n    // Store the contents so they can be restored later.\n    if (this.editor && this.shouldComponentRegenerate(prevProps)) {\n      const delta = this.editor.getContents();\n      const selection = this.editor.getSelection();\n      this.regenerationSnapshot = {delta, selection};\n      this.setState({generation: this.state.generation + 1});\n      this.destroyEditor();\n    }\n\n    // The component has been regenerated, so it must be re-instantiated, and\n    // its content must be restored to the previous values from the snapshot.\n    if (this.state.generation !== prevState.generation) {\n      const {delta, selection} = this.regenerationSnapshot!;\n      delete this.regenerationSnapshot;\n      this.instantiateEditor();\n      const editor = this.editor!;\n      editor.setContents(delta);\n      postpone(() => this.setEditorSelection(editor, selection));\n    }\n  }\n\n  instantiateEditor(): void {\n    if (this.editor) return;\n    this.editor = this.createEditor(\n      this.getEditingArea(),\n      this.getEditorConfig()\n    );\n  }\n\n  destroyEditor(): void {\n    if (!this.editor) return;\n    this.unhookEditor(this.editor);\n    delete this.editor;\n  }\n\n  /*\n  We consider the component to be controlled if `value` is being sent in props.\n  */\n  isControlled(): boolean {\n    return 'value' in this.props;\n  }\n\n  getEditorConfig(): QuillOptions {\n    return {\n      bounds: this.props.bounds,\n      formats: this.props.formats,\n      modules: this.props.modules,\n      placeholder: this.props.placeholder,\n      readOnly: this.props.readOnly,\n      scrollingContainer: this.props.scrollingContainer,\n      tabIndex: this.props.tabIndex,\n      theme: this.props.theme,\n    };\n  }\n\n  getEditor(): Quill {\n    if (!this.editor) throw new Error('Accessing non-instantiated editor');\n    return this.editor;\n  }\n\n  /**\n  Creates an editor on the given element. The editor will be passed the\n  configuration, have its events bound,\n  */\n  createEditor(element: Element, config: QuillOptions) {\n    const editor = new Quill(element, config);\n    if (config.tabIndex != null) {\n      this.setEditorTabIndex(editor, config.tabIndex);\n    }\n    this.hookEditor(editor);\n    return editor;\n  }\n\n  hookEditor(editor: Quill) {\n    // Expose the editor on change events via a weaker, unprivileged proxy\n    // object that does not allow accidentally modifying editor state.\n    this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);\n    // Using `editor-change` allows picking up silent updates, like selection\n    // changes on typing.\n    editor.on('editor-change', this.onEditorChange);\n  }\n\n  unhookEditor(editor: Quill) {\n    editor.off('editor-change', this.onEditorChange);\n  }\n\n  getEditorContents(): Value {\n    return this.value;\n  }\n\n  getEditorSelection(): Range {\n    return this.selection;\n  }\n\n  /*\n  True if the value is a Delta instance or a Delta look-alike.\n  */\n  isDelta(value: any): boolean {\n    return value && value.ops;\n  }\n\n  /*\n  Special comparison function that knows how to compare Deltas.\n  */\n  isEqualValue(value: any, nextValue: any): boolean {\n    if (this.isDelta(value) && this.isDelta(nextValue)) {\n      return isEqual(value.ops, nextValue.ops);\n    } else {\n      return isEqual(value, nextValue);\n    }\n  }\n\n  /*\n  Replace the contents of the editor, but keep the previous selection hanging\n  around so that the cursor won't move.\n  */\n  setEditorContents(editor: Quill, value: Value) {\n    this.value = value;\n    const sel = this.getEditorSelection();\n    if (typeof value === 'string') {\n      editor.setContents(editor.clipboard.convert(value));\n    } else {\n      editor.setContents(value);\n    }\n    postpone(() => this.setEditorSelection(editor, sel));\n  }\n\n  setEditorSelection(editor: Quill, range: Range) {\n    this.selection = range;\n    if (range) {\n      // Validate bounds before applying.\n      const length = editor.getLength();\n      range.index = Math.max(0, Math.min(range.index, length-1));\n      range.length = Math.max(0, Math.min(range.length, (length-1) - range.index));\n      editor.setSelection(range);\n    }\n  }\n\n  setEditorTabIndex(editor: Quill, tabIndex: number) {\n    if (editor?.scroll?.domNode) {\n      (editor.scroll.domNode as HTMLElement).tabIndex = tabIndex;\n    }\n  }\n\n  setEditorReadOnly(editor: Quill, value: boolean) {\n    if (value) {\n      editor.disable();\n    } else {\n      editor.enable();\n    }\n  }\n\n  /*\n  Returns a weaker, unprivileged proxy object that only exposes read-only\n  accessors found on the editor instance, without any state-modifying methods.\n  */\n  makeUnprivilegedEditor(editor: Quill) {\n    const e = editor;\n    return {\n      getHTML:      () => e.root.innerHTML,\n      getLength:    e.getLength.bind(e),\n      getText:      e.getText.bind(e),\n      getContents:  e.getContents.bind(e),\n      getSelection: e.getSelection.bind(e),\n      getBounds:    e.getBounds.bind(e),\n    };\n  }\n\n  getEditingArea(): Element {\n    if (!this.editingArea) {\n      throw new Error('Instantiating on missing editing area');\n    }\n    const element = ReactDOM.findDOMNode(this.editingArea);\n    if (!element) {\n      throw new Error('Cannot find element for editing area');\n    }\n    if (element.nodeType === 3) {\n      throw new Error('Editing area cannot be a text node');\n    }\n    return element as Element;\n  }\n\n  /*\n  Renders an editor area, unless it has been provided one to clone.\n  */\n  renderEditingArea(): JSX.Element {\n    const {children, preserveWhitespace} = this.props;\n    const {generation} = this.state;\n\n    const properties = {\n      key: generation,\n      ref: (instance: React.ReactInstance | null) => {\n        this.editingArea = instance\n      },\n    };\n\n    if (React.Children.count(children)) {\n      return React.cloneElement(\n        React.Children.only(children)!,\n        properties\n      );\n    }\n\n    return preserveWhitespace ?\n      <pre {...properties}/> :\n      <div {...properties}/>;\n  }\n\n  render() {\n    return (\n      <div\n        id={this.props.id}\n        style={this.props.style}\n        key={this.state.generation}\n        className={`quill ${this.props.className ?? ''}`}\n        onKeyPress={this.props.onKeyPress}\n        onKeyDown={this.props.onKeyDown}\n        onKeyUp={this.props.onKeyUp}\n      >\n        {this.renderEditingArea()}\n      </div>\n    );\n  }\n\n  onEditorChange = (\n    eventName: 'text-change' | 'selection-change',\n    rangeOrDelta: Range | DeltaStatic,\n    oldRangeOrDelta: Range | DeltaStatic,\n    source: Sources,\n  ) => {\n    if (eventName === 'text-change') {\n      this.onEditorChangeText?.(\n        this.editor!.root.innerHTML,\n        rangeOrDelta as DeltaStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    } else if (eventName === 'selection-change') {\n      this.onEditorChangeSelection?.(\n        rangeOrDelta as RangeStatic,\n        source,\n        this.unprivilegedEditor!\n      );\n    }\n  };\n\n  onEditorChangeText(\n    value: string,\n    delta: DeltaStatic,\n    source: Sources,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n\n    // We keep storing the same type of value as what the user gives us,\n    // so that value comparisons will be more stable and predictable.\n    const nextContents = this.isDelta(this.value)\n      ? editor.getContents()\n      : editor.getHTML();\n\n    if (nextContents !== this.getEditorContents()) {\n      // Taint this `delta` object, so we can recognize whether the user\n      // is trying to send it back as `value`, preventing a likely loop.\n      this.lastDeltaChangeSet = delta;\n\n      this.value = nextContents;\n      this.props.onChange?.(value, delta, source, editor);\n    }\n  }\n\n  onEditorChangeSelection(\n    nextSelection: RangeStatic,\n    source: Sources,\n    editor: UnprivilegedEditor,\n  ): void {\n    if (!this.editor) return;\n    const currentSelection = this.getEditorSelection();\n    const hasGainedFocus = !currentSelection && nextSelection;\n    const hasLostFocus = currentSelection && !nextSelection;\n\n    if (isEqual(nextSelection, currentSelection)) return;\n\n    this.selection = nextSelection;\n    this.props.onChangeSelection?.(nextSelection, source, editor);\n\n    if (hasGainedFocus) {\n      this.props.onFocus?.(nextSelection, source, editor);\n    } else if (hasLostFocus) {\n      this.props.onBlur?.(currentSelection, source, editor);\n    }\n  }\n\n  focus(): void {\n    if (!this.editor) return;\n    this.editor.focus();\n  }\n\n  blur(): void {\n    if (!this.editor) return;\n    this.selection = null;\n    this.editor.blur();\n  }\n}\n\n/*\nSmall helper to execute a function in the next micro-tick.\n*/\nfunction postpone(fn: (value: void) => void) {\n  Promise.resolve().then(fn);\n}\n\n// Compatibility Export to avoid `require(...).default` on CommonJS.\n// See: https://github.com/Microsoft/TypeScript/issues/2719\nexport = ReactQuill;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}