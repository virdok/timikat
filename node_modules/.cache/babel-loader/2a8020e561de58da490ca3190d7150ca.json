{"ast":null,"code":"import _slicedToArray from \"/home/dkirchan/timikat2/timikat/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  var _useState = useState(function () {\n    try {\n      // Get from local storage by key\n      var item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      storedValue = _useState2[0],\n      setStoredValue = _useState2[1]; // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage.\n\n\n  var setValue = function setValue(value) {\n    try {\n      // Allow value to be a function so we have same API as useState\n      var valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"z0XdM4TLkDZuzSOGq1lQIVlfpgk=\");\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/home/dkirchan/timikat2/timikat/src/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","value","valueToStore","Function","setItem","stringify"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAAA;;AAC1C;AACA;AACA,kBAAsCH,QAAQ,CAAC,YAAM;AACnD,QAAI;AACF;AACA,UAAMI,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,GAA5B,CAAb,CAFE,CAGF;;AAAA;AACA,aAAOE,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBD,YAAjC;AACD,KALD,CAKE,OAAOO,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOP,YAAP;AACD;AACF,GAX6C,CAA9C;AAAA;AAAA,MAAOU,WAAP;AAAA,MAAoBC,cAApB,iBAH0C,CAgB1C;AACA;;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1B,QAAI;AACF;AACA,UAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACH,WAAD,CAAjC,GAAiDG,KADnD,CAFE,CAIF;;AACAF,MAAAA,cAAc,CAACG,YAAD,CAAd,CALE,CAMF;;AACAZ,MAAAA,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BjB,GAA5B,EAAiCM,IAAI,CAACY,SAAL,CAAeH,YAAf,CAAjC;AACD,KARD,CAQE,OAAOP,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAbD;;AAeA,SAAO,CAACG,WAAD,EAAcE,QAAd,CAAP;AACD;;GAlCQd,e;;AAoCT,eAAeA,eAAf","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that\r\n  // persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n"]},"metadata":{},"sourceType":"module"}