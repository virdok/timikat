{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\n\nfunction useOuterClick(callback) {\n  _s();\n\n  // Initialize mutable ref, which stores callback\n  var callbackRef = useRef(); // returned to client, who marks \"border\" element\n\n  var innerRef = useRef(); // Update callback on each render, so second useEffect has access to current value\n\n  useEffect(function () {\n    callbackRef.current = callback;\n  });\n  useEffect(function () {\n    document.addEventListener(\"click\", handleClick);\n    return function () {\n      return document.removeEventListener(\"click\", handleClick);\n    };\n\n    function handleClick(e) {\n      if (innerRef.current && callbackRef.current && !innerRef.current.contains(e.target)) callbackRef.current(e);\n    }\n  }, []);\n  return innerRef;\n}\n\n_s(useOuterClick, \"0rxl1t/Imqya8b/ueucrcURAjE8=\");\n\nexport default useOuterClick;","map":{"version":3,"sources":["/home/dkirchan/timikat/src/hooks/useOuterClick.js"],"names":["useEffect","useRef","useOuterClick","callback","callbackRef","innerRef","current","document","addEventListener","handleClick","removeEventListener","e","contains","target"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAAA;;AAC/B;AACA,MAAMC,WAAW,GAAGH,MAAM,EAA1B,CAF+B,CAG/B;;AACA,MAAMI,QAAQ,GAAGJ,MAAM,EAAvB,CAJ+B,CAM/B;;AACAD,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,WAAW,CAACE,OAAZ,GAAsBH,QAAtB;AACD,GAFQ,CAAT;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCC,WAAnC;AACA,WAAO;AAAA,aAAMF,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCD,WAAtC,CAAN;AAAA,KAAP;;AACA,aAASA,WAAT,CAAqBE,CAArB,EAAwB;AACtB,UACEN,QAAQ,CAACC,OAAT,IACAF,WAAW,CAACE,OADZ,IAEA,CAACD,QAAQ,CAACC,OAAT,CAAiBM,QAAjB,CAA0BD,CAAC,CAACE,MAA5B,CAHH,EAKET,WAAW,CAACE,OAAZ,CAAoBK,CAApB;AACH;AACF,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAON,QAAP;AACD;;GAzBQH,a;;AA2BT,eAAeA,aAAf","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\nfunction useOuterClick(callback) {\r\n  // Initialize mutable ref, which stores callback\r\n  const callbackRef = useRef();\r\n  // returned to client, who marks \"border\" element\r\n  const innerRef = useRef();\r\n\r\n  // Update callback on each render, so second useEffect has access to current value\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClick);\r\n    return () => document.removeEventListener(\"click\", handleClick);\r\n    function handleClick(e) {\r\n      if (\r\n        innerRef.current &&\r\n        callbackRef.current &&\r\n        !innerRef.current.contains(e.target)\r\n      )\r\n        callbackRef.current(e);\r\n    }\r\n  }, []);\r\n\r\n  return innerRef;\r\n}\r\n\r\nexport default useOuterClick;\r\n"]},"metadata":{},"sourceType":"module"}