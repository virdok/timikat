{"ast":null,"code":"import _toConsumableArray from \"/home/dkirchan/timikat2/timikat/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/dkirchan/timikat2/timikat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/home/dkirchan/timikat2/timikat/src/pages/tables/RowExpanding.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTable, useExpanded } from \"react-table\";\nimport { Card, Container, Table } from \"react-bootstrap\";\nimport { PlusCircle, MinusCircle } from \"react-feather\";\nimport { tableData, tableColumns } from \"./data.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar RowExpandingTable = function RowExpandingTable(_ref) {\n  _s();\n\n  var userColumns = _ref.columns,\n      data = _ref.data;\n\n  var _useTable = useTable({\n    columns: userColumns,\n    data: data\n  }, useExpanded // Use the useExpanded plugin hook\n  ),\n      getTableProps = _useTable.getTableProps,\n      getTableBodyProps = _useTable.getTableBodyProps,\n      headerGroups = _useTable.headerGroups,\n      rows = _useTable.rows,\n      prepareRow = _useTable.prepareRow;\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        tag: \"h5\",\n        children: \"Row Expanding\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        className: \"card-subtitle text-muted\",\n        children: \"Expandable rows by react-table\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(Table, _objectSpread(_objectSpread({\n        striped: true,\n        bordered: true\n      }, getTableProps()), {}, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(function (headerGroup) {\n            return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, headerGroup.getHeaderGroupProps()), {}, {\n              children: headerGroup.headers.map(function (column) {\n                return /*#__PURE__*/_jsxDEV(\"th\", _objectSpread(_objectSpread({}, column.getHeaderProps()), {}, {\n                  children: column.render(\"Header\")\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 34,\n                  columnNumber: 19\n                }, _this);\n              })\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"tbody\", _objectSpread(_objectSpread({}, getTableBodyProps()), {}, {\n          children: rows.map(function (row, i) {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", _objectSpread(_objectSpread({}, row.getRowProps()), {}, {\n              children: row.cells.map(function (cell) {\n                return /*#__PURE__*/_jsxDEV(\"td\", _objectSpread(_objectSpread({}, cell.getCellProps()), {}, {\n                  children: cell.render(\"Cell\")\n                }), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 48,\n                  columnNumber: 23\n                }, _this);\n              })\n            }), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, _this);\n          })\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, _this)]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RowExpandingTable, \"T5U6FpG7qNL2+V8iGF3ne+5qi0g=\", false, function () {\n  return [useTable];\n});\n\n_c = RowExpandingTable;\nvar tableColumnsExpandable = [{\n  // Build our expander column\n  id: \"expander\",\n  // Make sure it has an ID\n  Header: function Header(_ref2) {\n    var getToggleAllRowsExpandedProps = _ref2.getToggleAllRowsExpandedProps,\n        isAllRowsExpanded = _ref2.isAllRowsExpanded;\n    return /*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, getToggleAllRowsExpandedProps()), {}, {\n      children: isAllRowsExpanded ? /*#__PURE__*/_jsxDEV(MinusCircle, {\n        className: \"feather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, _this) : /*#__PURE__*/_jsxDEV(PlusCircle, {\n        className: \"feather\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, _this)\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, _this);\n  },\n  Cell: function Cell(_ref3) {\n    var row = _ref3.row;\n    return (// Use the row.canExpand and row.getToggleRowExpandedProps prop getter\n      // to build the toggle for expanding a row\n      row.canExpand ? /*#__PURE__*/_jsxDEV(\"span\", _objectSpread(_objectSpread({}, row.getToggleRowExpandedProps({\n        style: {\n          // We can even use the row.depth property\n          // and paddingLeft to indicate the depth\n          // of the row\n          paddingLeft: \"\".concat(row.depth * 2, \"rem\")\n        }\n      })), {}, {\n        children: row.isExpanded ? /*#__PURE__*/_jsxDEV(MinusCircle, {\n          className: \"feather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, _this) : /*#__PURE__*/_jsxDEV(PlusCircle, {\n          className: \"feather\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, _this) : null\n    );\n  }\n}].concat(_toConsumableArray(tableColumns));\n\nvar RowExpanding = function RowExpanding() {\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      title: \"Row Expanding\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"p-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"h3 mb-3\",\n        children: \"Row Expanding\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(RowExpandingTable, {\n        columns: tableColumnsExpandable,\n        data: tableData.slice(0, 10)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 3\n  }, _this);\n};\n\n_c2 = RowExpanding;\nexport default RowExpanding;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RowExpandingTable\");\n$RefreshReg$(_c2, \"RowExpanding\");","map":{"version":3,"sources":["/home/dkirchan/timikat2/timikat/src/pages/tables/RowExpanding.js"],"names":["React","Helmet","useTable","useExpanded","Card","Container","Table","PlusCircle","MinusCircle","tableData","tableColumns","RowExpandingTable","userColumns","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","tableColumnsExpandable","id","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","style","paddingLeft","depth","isExpanded","RowExpanding","slice"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { useTable, useExpanded } from \"react-table\";\r\n\r\nimport { Card, Container, Table } from \"react-bootstrap\";\r\nimport { PlusCircle, MinusCircle } from \"react-feather\";\r\n\r\nimport { tableData, tableColumns } from \"./data.js\";\r\n\r\nconst RowExpandingTable = ({ columns: userColumns, data }) => {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      {\r\n        columns: userColumns,\r\n        data,\r\n      },\r\n      useExpanded // Use the useExpanded plugin hook\r\n    );\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Header>\r\n        <Card.Title tag=\"h5\">Row Expanding</Card.Title>\r\n        <h6 className=\"card-subtitle text-muted\">\r\n          Expandable rows by react-table\r\n        </h6>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Table striped bordered {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst tableColumnsExpandable = [\r\n  {\r\n    // Build our expander column\r\n    id: \"expander\", // Make sure it has an ID\r\n    Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n      <span {...getToggleAllRowsExpandedProps()}>\r\n        {isAllRowsExpanded ? (\r\n          <MinusCircle className=\"feather\" />\r\n        ) : (\r\n          <PlusCircle className=\"feather\" />\r\n        )}\r\n      </span>\r\n    ),\r\n    Cell: ({ row }) =>\r\n      // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n      // to build the toggle for expanding a row\r\n      row.canExpand ? (\r\n        <span\r\n          {...row.getToggleRowExpandedProps({\r\n            style: {\r\n              // We can even use the row.depth property\r\n              // and paddingLeft to indicate the depth\r\n              // of the row\r\n              paddingLeft: `${row.depth * 2}rem`,\r\n            },\r\n          })}\r\n        >\r\n          {row.isExpanded ? (\r\n            <MinusCircle className=\"feather\" />\r\n          ) : (\r\n            <PlusCircle className=\"feather\" />\r\n          )}\r\n        </span>\r\n      ) : null,\r\n  },\r\n  ...tableColumns,\r\n];\r\n\r\nconst RowExpanding = () => (\r\n  <React.Fragment>\r\n    <Helmet title=\"Row Expanding\" />\r\n    <Container fluid className=\"p-0\">\r\n      <h1 className=\"h3 mb-3\">Row Expanding</h1>\r\n\r\n      <RowExpandingTable\r\n        columns={tableColumnsExpandable}\r\n        data={tableData.slice(0, 10)}\r\n      />\r\n    </Container>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default RowExpanding;\r\n"]},"metadata":{},"sourceType":"module"}